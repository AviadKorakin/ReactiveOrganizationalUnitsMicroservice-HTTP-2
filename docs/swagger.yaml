basePath: /
definitions:
  models.HTTPError:
    properties:
      code:
        description: |-
          the HTTP status code
          example: 400
        example: 400
        type: integer
      message:
        description: |-
          a descriptive error message
          example: bad request
        example: bad request
        type: string
    type: object
  models.Unit:
    description: Unit entity with auto-generated ID and creation date
    properties:
      creationDate:
        description: '@CreationDate in dd-MM-yyyy format'
        type: string
      description:
        description: '@Description of this unit'
        type: string
      name:
        description: '@Name of the unit'
        type: string
      unitId:
        description: '@ID'
        type: string
      users:
        description: '@Users assigned to this unit (email identifiers)'
        items:
          type: string
        type: array
    type: object
  models.UnitBoundary:
    properties:
      creationDate:
        type: string
      description:
        type: string
      name:
        type: string
      unitId:
        type: string
    type: object
host: localhost:8443
info:
  contact: {}
  description: Microservice for managing organizational units and their users.
  title: Reactive Organizational Units API
  version: "1.0"
paths:
  /units:
    delete:
      responses:
        "204":
          description: No Content
      summary: Delete all organizational units
      tags:
      - units
    get:
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Unit'
            type: array
      summary: List organizational units with pagination
      tags:
      - units
    post:
      consumes:
      - application/json
      description: Adds a unit; if UnitID provided it's overridden, CreationDate auto-set
      parameters:
      - description: Unit data
        in: body
        name: unit
        required: true
        schema:
          $ref: '#/definitions/models.UnitBoundary'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Unit'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Create a new organizational unit
      tags:
      - units
  /units/{unitId}:
    get:
      parameters:
      - description: Unit ID
        in: path
        name: unitId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Unit'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Get a specific organizational unit
      tags:
      - units
    put:
      consumes:
      - application/json
      parameters:
      - description: Unit ID
        in: path
        name: unitId
        required: true
        type: string
      - description: Updated unit data
        in: body
        name: unit
        required: true
        schema:
          $ref: '#/definitions/models.UnitBoundary'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Update an organizational unit
      tags:
      - units
swagger: "2.0"
